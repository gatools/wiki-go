name: Binary Builds - Stable

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"
      - "!v*-rc*"
      - "!v*-dev"
      - "!v*-beta*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases

    env:
      GOFLAGS: -mod=vendor

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Disable DEBUG_MODE in debug-toggle.js for release
        run: |
          sed -i 's/const DEBUG_MODE = true;/const DEBUG_MODE = false;/' internal/resources/static/js/debug-toggle.js

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod  # Use version from go.mod
          check-latest: true

      - name: Set up Node.js (for minifying CSS and JS)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install minifiers
        run: |
          npm install -g clean-css-cli uglify-js

      - name: Minify all CSS and JS
        run: |
          find internal/resources/static/css -name '*.css' -type f -print -exec cleancss -o {} {} \;
          find internal/resources/static/js -name '*.js' -type f -print -exec uglifyjs {} -o {} \;

      - name: Get the version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          if [[ $VERSION == v* ]]; then
            VERSION=${VERSION:1}
          fi
          echo "VERSION_NUM=${VERSION}" >> $GITHUB_OUTPUT
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          echo "MAJOR=${MAJOR}" >> $GITHUB_OUTPUT
          echo "MINOR=${MINOR}" >> $GITHUB_OUTPUT
          echo "PATCH=${PATCH}" >> $GITHUB_OUTPUT

      - name: Create Build Directory
        run: mkdir -p build

      - name: Build for Linux (amd64)
        run: GOOS=linux GOARCH=amd64 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-amd64 .

      - name: Build for Linux (386)
        run: GOOS=linux GOARCH=386 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-386 .

      - name: Build for Linux (arm64)
        run: GOOS=linux GOARCH=arm64 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-arm64 .

      - name: Build for Linux ARMv5
        run: GOOS=linux GOARCH=arm GOARM=5 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-armv5 .

      - name: Build for Linux ARMv6
        run: GOOS=linux GOARCH=arm GOARM=6 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-armv6 .

      - name: Build for Linux ARMv7
        run: GOOS=linux GOARCH=arm GOARM=7 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-armv7 .

      - name: Build for Linux (s390x)
        run: GOOS=linux GOARCH=s390x go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-linux-s390x .

      - name: Build for Windows (amd64)
        run: GOOS=windows GOARCH=amd64 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-windows-amd64.exe .

      - name: Build for Windows (arm64)
        run: GOOS=windows GOARCH=arm64 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-windows-arm64.exe .

      - name: Build for macOS (amd64)
        run: GOOS=darwin GOARCH=amd64 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-mac-amd64 .

      - name: Build for macOS (arm64)
        run: GOOS=darwin GOARCH=arm64 go build -ldflags "-X 'wiki-go/internal/version.Version=${{ steps.get_version.outputs.VERSION }}'" -o build/wiki-go-mac-arm64 .

      - name: Get commits since last tag
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Previous tag: $PREV_TAG"
          LOG=$(git log "$PREV_TAG"..HEAD --pretty=format:"- %s (%h by %an)")
          echo "$LOG"
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            build/wiki-go-linux-amd64
            build/wiki-go-linux-386
            build/wiki-go-linux-arm64
            build/wiki-go-linux-armv5
            build/wiki-go-linux-armv6
            build/wiki-go-linux-armv7
            build/wiki-go-linux-s390x
            build/wiki-go-windows-amd64.exe
            build/wiki-go-windows-arm64.exe
            build/wiki-go-mac-amd64
            build/wiki-go-mac-arm64